visits.z1.2 <- cor(visits.z1[,-c(1,2,3)])
hc <- findCorrelation(visits.z1.2, cutoff=0.9) # putt any value as a "cutoff"
hc <- sort(hc)
visits.z1 <- visits.z1[,-c(hc)]
# Escalamos los valores de las variables numéricas
visits.z1 <- cbind(visits.z1[,c(1,2,3)], as.data.frame(scale(visits.z1[,-c(1,2,3)])))
shiny::runApp('D:/CV/Shiny/Areas.Conocimiento')
rsconnect::setAccountInfo(name='obartolomep-pfm', token='786D37B85FF55782546A3A5ABBB2C02D', secret='fUDd0lMpEHjnbclcW6ga63n/YPTsTjE6CdiUJ9R3')
library(rsconnect)
install.packages("rsconnect")
shiny::runApp('D:/CV/Shiny/Areas.Conocimiento')
runApp('D:/CV/Shiny/Areas.Conocimiento')
runApp('D:/CV/Shiny/Areas.Conocimiento')
runApp('D:/CV/Shiny/Areas.Conocimiento')
ggplot(areas.lenguaje, aes(x=nombre, y=level, fill=level, label=level)) +
geom_bar(stat="identity",
show.legend = F) +
xlab("") +
ylab("") +
theme_light(title("Lenguajes")) +
scale_fill_gradient(low="lightgreen", high="lightblue", limits=c(5,8))
runApp('D:/CV/Shiny/Areas.Conocimiento')
runApp('D:/CV/Shiny/Areas.Conocimiento')
runApp('D:/CV/Shiny/Areas.Conocimiento')
runApp('D:/CV/Shiny/Areas.Conocimiento')
shiny::runApp('D:/CV/Shiny/Areas.Conocimiento')
runApp('D:/CV/Shiny/Areas.Conocimiento')
runApp('D:/CV/Shiny/Areas.Conocimiento')
runApp('D:/CV/Shiny/Areas.Conocimiento')
runApp('D:/CV/Shiny/Areas.Conocimiento')
load("D:/Máster en Estadística Aplicada con R/Módulo 1/Tema 4/scripts/.RData")
# Cargamos los datosy hacemos una primera observación
read.csv("data/estadisticas_totales_jugadores_liga_19_20.csv", stringsAsFactors = F, sep = ";")
data("iris")
ggplot(iris,aes(Species,Sepal.Length, fill = Species)) +
geom_violin() +
geom_boxplot( alpha =0.6) +
geom_jitter(alpha = 0.5)
library(ggplot2)
ggplot(iris,aes(Species,Sepal.Length, fill = Species)) +
geom_violin() +
geom_boxplot( alpha =0.6) +
geom_jitter(alpha = 0.5)
ggplot(iris,aes(Species,Sepal.Length, fill = Species)) +
geom_violin() +
geom_boxplot( alpha =0.6)
USArrest_scaled <- scale(USArrest)
head(USArrest)
library(GGally)
ggpairs(USArrest)
USArrest_scaled <- scale(USArrest)
USArrest_dist <- dist(USArrest_scaled)
library(pheatmap)
pheatmap(as.matrix(USArrest_dist), treeheight_row = 0, treeheight_col = 0)
install.packages(pheatmap)
install.packages("pheatmap")
head(USArrest)
library(GGally)
ggpairs(USArrest)
USArrest_scaled <- scale(USArrest)
USArrest_dist <- dist(USArrest_scaled)
library(pheatmap)
pheatmap(as.matrix(USArrest_dist), treeheight_row = 0, treeheight_col = 0)
data(USArrest)
data(USArrests)
head(USArrests)
library(GGally)
ggpairs(USArrest)
ggpairs(USArrests)
USArrest_scaled <- scale(USArrests)
USArrest_dist <- dist(USArrest_scaled)
library(pheatmap)
pheatmap(as.matrix(USArrest_dist), treeheight_row = 0, treeheight_col = 0)
( fit1 <- Arima(sunspot.year, order=c(1,0,0))
)
library(forecast)
(fit1 <- Arima(sunspot.year, order=c(1,0,0)))
(fit1 <- Arima(sunspot.year, order=c(2,0,0)))
(fit1 <- Arima(sunspot.year, order=c(3,0,0)))
library(fpp2)
data(austa)
force(austa)
ggtsdisplay(austa)
fit <- Arima(austa, order = c(1,0,0))
autoplot(forecast(fit, h=1))
autoplot(forecast(fit))
shiny::runApp('D:/Blog Data Kicks/shiny_apps/DK_xG_calculator')
library(fma)
str(internet)
ggtsdisplay(internet, main="Usuarios de conectados en un servidor de internet")
fit1 <- auto.arima(internet)
fit1
shiny::runApp('D:/Blog Data Kicks/shiny_apps/DK_xG_calculator')
runApp('D:/Blog Data Kicks/shiny_apps/DK_xG_calculator')
runApp('D:/Blog Data Kicks/shiny_apps/DK_xG_calculator')
runApp('D:/Blog Data Kicks/shiny_apps/DK_xG_calculator')
runApp('D:/Blog Data Kicks/shiny_apps/DK_xG_calculator')
volcanic <- scan("http://robjhyndman.com/tsdldata/annual/dvi.dat", skip = 1)
summary(volcanic)
head(volcanic)
length(volcanic)
volcanic.ts <- ts(volcanic)
(volcanic.ts <- ts(volcanic))
packages.cran = c("tidyverse", "forecast")
inst <- packages.cran %in% installed.packages()
if(length(packages.cran[!inst]) > 0) install.packages(packages.cran[!inst])
lapply(packages.cran, require, character.only=T)
(volcanic.ts <- ts(volcanic))
autoplot(volcanic.ts)
frequency(volcanic.ts)
autoplot(volcanic.ts)
plot(decompose(volcanic.ts))
plot(decompose(volcanic))
plot(decompose(volcanic.ts))
(volcanic.ts <- ts(volcanic))
plot(stl(volcanic.ts))
(volcanic.ts <- ts(volcanic))
frequency(volcanic.ts)
autoplot(volcanic.ts)
(volcanic <- scan("http://robjhyndman.com/tsdldata/annual/dvi.dat", skip = 1))
summary(volcanic)
length(volcanic)
volcanic.ts.out <- tsoutliers(volcanic.ts)
autoplot(volcanic.ts)
volcanic.ts.out <- tsoutliers(volcanic.ts)
autoplot(volcanic.ts.out)
View(volcanic.ts.out)
View(volcanic.ts.out)
View(volcanic.ts.out)
volcanic.ts.out <- tsoutliers(volcanic.ts)
volcanic.ts[volcanic.ts.out$index,] <- volcanic.ts.out$replacements
volcanic.ts.out <- tsoutliers(volcanic.ts)
volcanic.ts[volcanic.ts.out$index] <- volcanic.ts.out$replacements
autoplot(volcanic.ts)
View(volcanic.ts.out)
volcanic.ts.out
autoplot(volcanic.ts)
summary(volcanic.ts)
ggAcf(volcanic.ts)
kpss.test(volcanic.ts)
packages.cran = c("tidyverse", "forecast", "tseries")
inst <- packages.cran %in% installed.packages()
if(length(packages.cran[!inst]) > 0) install.packages(packages.cran[!inst])
lapply(packages.cran, require, character.only=T)
kpss.test(volcanic.ts)
adf.test(volcanic.ts)
kpss.test(volcanic.ts)
Box.test(diff(volcanic.ts0, lag = 10, type = "Ljung-Box"))
Box.test(diff(volcanic.ts, lag = 10, type = "Ljung-Box"))
10
Box.test(diff(volcanic.ts, lag = , type = "Ljung-Box"))
Box.test(diff(volcanic.ts, lag = 5, type = "Ljung-Box"))
Box.test(diff(volcanic.ts, lag = 7, type = "Ljung-Box"))
volcanic.ts.log <- log(volcanic.ts)
ggAcf(volcanic.ts.log)
Box.test(diff(volcanic.ts.log, lag = 10, type = "Ljung-Box"))
volcanic.ts.log <- log(volcanic.ts)
ggAcf(volcanic.ts.log)
volcanic.ts.log <- ts(log(volcanic))
ggAcf(volcanic.ts.log)
log(0)
autoplot(volcanic.ts)
volcanic.ts.bc <- BoxCox(volcanic)
volcanic.ts.bc <- BoxCox(volcanic, lambda = "auto")
ggAcf(volcanic.ts.bc)
Box.test(diff(volcanic.ts.bc, lag = 10, type = "Ljung-Box"))
volcanic.ts.bc <- BoxCox(volcanic, lambda = "auto")
ggAcf(volcanic.ts.bc)
Box.test(volcanic.ts.bc, lag = 10, type = "Ljung-Box")
volcanic.ts.bc <- BoxCox(volcanic, lambda = "auto")
autoplot(volcanic.ts.bc)
volcanic.ts.bc <- BoxCox(volcanic.ts, lambda = "auto")
autoplot(volcanic.ts.bc)
ggAcf(volcanic.ts.bc)
Box.test(volcanic.ts.bc, lag = 10, type = "Ljung-Box")
volcanic.ts.bc <- BoxCox(volcanic.ts, lambda = BoxCox.lambda(volcanic.ts))
autoplot(volcanic.ts.bc)
ggAcf(volcanic.ts.bc)
Box.test(volcanic.ts.bc, lag = 10, type = "Ljung-Box")
Box.test(volcanic.ts, lag = 10, type = "Ljung-Box")
adf.test(volcanic.ts)
kpss.test(volcanic.ts)
packages.cran = c("tidyverse", "ISLR", "neuralnet", "NeuralNetTools")
inst <- packages.cran %in% installed.packages()
if(length(packages.cran[!inst]) > 0) install.packages(packages.cran[!inst])
lapply(packages.cran, require, character.only=T)
data("College")
force(College)
View(College)
Private <- College$Private
college.num <- College %>% select(-Private)
max.data <- apply(college.num, 2, max)
min.data <- apply(college.num, 2, min)
college.scaled <- data.frame(cbind(scale(college.num, center = min.data, scale = max.data - min.data), Private = Private))
college.scaled$Private <- factor(college.scaled$Private, levels = c("No", "Yes"))
datos <- pivot_longer(college.scaled, cols = 1:17)
ggplot(datos, aes(x = value, fill = Private)) +
geom_histogram(position = "identity" , alpha = 0.5, bins = 10)+
facet_wrap(~name)+
theme_minimal()
View(college.scaled)
Private <- College$Private
college.num <- College %>% select(-Private)
max.data <- apply(college.num, 2, max)
min.data <- apply(college.num, 2, min)
college.scaled <- data.frame(cbind(scale(college.num, center = min.data, scale = max.data - min.data), Private = Private))
college.scaled$Private <- factor(college.scaled$Private, labels = c("No", "Yes"))
datos <- pivot_longer(college.scaled, cols = 1:17)
ggplot(datos, aes(x = value, fill = Private)) +
geom_histogram(position = "identity" , alpha = 0.5, bins = 10)+
facet_wrap(~name)+
theme_minimal()
Private <- college.scaled$Private
Private <- as.data.frame(Private)
Private <- with(Private, data.frame(model.matrix(~Private + 0)))
college.prep <- as.data.frame(cbind(college.scaled, Private)) %>%
select(-Private)
head(college.prep)
set.seed(1234)
index = sample(1:nrow(college.prep),round(.7*nrow(college.prep)))
college.prep.train <- as.data.frame(college.prep[index,])
college.prep.test <- as.data.frame(college.prep[-index,])
View(college.prep.train)
n <- names(college.prep[1:17])
(f <- as.formula(paste("PrivateNo + PrivateYes ~", paste(n, collapse = " + "))))
net <- neuralnet(f,
data=college.prep.train,
hidden=5)
names(net)
set.seed(1234)
net <- neuralnet(f,
data=college.prep.train,
hidden=5)
names(net)
plotnet(net, cex_val=.5)
net.pred <- compute(net, college.prep.test[1:17])
head(data.frame(private = college.scaled[-index, "Private"],
PrivateNo=round(net.pred$net.result[,1],2),
PrivateYes=round(net.pred$net.result[,2],2)))
net.pred <- compute(net, college.prep.test[1:17])
head(data.frame(Private = college.scaled[-index, "Private"],
PrivateNo=round(net.pred$net.result[,1],2),
PrivateYes=round(net.pred$net.result[,2],2)))
net.pred <- compute(net, college.prep.test[1:17])
head(data.frame(Private = college.scaled[-index, "Private"],
PrivateNo=round(net.pred$net.result[,1],2),
PrivateYes=round(net.pred$net.result[,2],2)))
packages.cran = c("tidyverse", "ISLR", "neuralnet", "NeuralNetTools", "caret")
inst <- packages.cran %in% installed.packages()
if(length(packages.cran[!inst]) > 0) install.packages(packages.cran[!inst])
lapply(packages.cran, require, character.only=T)
net.pred.binary <- round(net.pred$net.result, digits = 0)
net.pred.yn = c("No", "Yes")[apply(net.pred.binary, 1, which.max)]
confusionMatrix(as.factor(net.pred.yn), college.scaled$Private[-index])
packages.cran = c("tidyverse", "ISLR", "neuralnet", "NeuralNetTools",
"caret", "ROCR")
inst <- packages.cran %in% installed.packages()
if(length(packages.cran[!inst]) > 0) install.packages(packages.cran[!inst])
lapply(packages.cran, require, character.only=T)
pred <- prediction(net.pred$net.result, college.prep.test[,18:19])
perf <- performance(pred, "tpr", "fpr")
plot(perf, colorize=TRUE)
pred <- prediction(net.pred$net.result, college.prep.test[,18:19])
perf <- performance(pred, "tpr", "fpr")
plot(perf, colorize=TRUE)
unlist(slot(performance(pred, "auc"), "y.values"))
packages.cran = c("tidyverse", "ISLR", "neuralnet", "NeuralNetTools",
"caret", "ROCR")
inst <- packages.cran %in% installed.packages()
if(length(packages.cran[!inst]) > 0) install.packages(packages.cran[!inst])
lapply(packages.cran, require, character.only=T)
str(Auto)
summary(Auto)
packages.cran = c("tidyverse", "ISLR", "neuralnet", "NeuralNetTools",
"caret", "ROCR", "GGally")
inst <- packages.cran %in% installed.packages()
if(length(packages.cran[!inst]) > 0) install.packages(packages.cran[!inst])
lapply(packages.cran, require, character.only=T)
auto <- Auto %>%
select(-name)
max.data <- apply(auto, 2, max)
min.data <- apply(auto, 2, min)
auto.scaled <- scale(auto, center = min.data, scale = max.data - min.data)
ggpairs(as.data.frame(auto.scaled), progress = FALSE)
set.seed(1234)
index = sample(1:nrow(auto.scaled),round(.7*nrow(auto.scaled)))
auto.scaled.train <- as.data.frame(auto.scaled[index,])
auto.scaled.test <- as.data.frame(auto.scaled[-index,])
set.seed(1234)
index = sample(1:nrow(auto.scaled),round(.7*nrow(auto.scaled)))
auto.scaled.train <- as.data.frame(auto.scaled[index,])
auto.scaled.test <- as.data.frame(auto.scaled[-index,])
View(auto.scaled.train)
n <- names(auto.scaled)
(f <- as.formula(paste("mpg ~ ", paste(n, collapse = " + "))))
n <- names(auto.scaled)
(f <- as.formula(paste("mpg ~", paste(n, collapse = " + "))))
n <- names(auto.scaled)
(f <- as.formula(paste("mpg ~", paste(n[!n %in% "mpg"],, collapse = " + "))))
n <- names(auto.scaled)
(f <- as.formula(paste("mpg ~", paste(n[!n %in% "mpg"], collapse = " + "))))
f <- mpg ~ cylinders + displacement + horsepower + weight + acceleration + year + origin
(f <- mpg ~ cylinders + displacement + horsepower + weight + acceleration + year + origin)
fit <- neuralnet(f,
data=auto.scaled.train,
hidden=10,
algorithm = "rprop+",
err.fct = "sse",
act.fct = "logistic",
threshold= .1,
linear.output=TRUE)
set.seed(1234)
fit <- neuralnet(f,
data=auto.scaled.train,
hidden=10,
algorithm = "rprop+",
err.fct = "sse",
act.fct = "logistic",
threshold= .1,
linear.output=TRUE)
set.seed(1234)
fit <- neuralnet(f,
data=auto.scaled.train,
hidden=10,
algorithm = "rprop+",
err.fct = "sse",
act.fct = "logistic",
threshold= .1,
linear.output=TRUE)
plotnet(fit)
pred <- compute(fit, auto.scaled.train[, -1])
fit.pred <- compute(fit, auto.scaled.train[, -1])
packages.cran = c("tidyverse", "ISLR", "neuralnet", "NeuralNetTools",
"caret", "ROCR", "GGally", "Metrics")
inst <- packages.cran %in% installed.packages()
if(length(packages.cran[!inst]) > 0) install.packages(packages.cran[!inst])
lapply(packages.cran, require, character.only=T)
auto.real <- Auto[-index, "mpg"]
auto.pred <- fit.pred$net.result*(max(Auto$mpg)-min(Auto$medv))+min(Auto$medv)
#cor^2
round(cor(auto.pred, auto.real)^2, 6)
auto.real <- Auto[-index, "mpg"]
auto.pred <- fit.pred$net.result*(max(Auto$mpg) - min(Auto$mpg)) + min(Auto$mpg)
#cor^2
round(cor(auto.pred, auto.real)^2, 6)
fit.pred <- compute(fit, auto.scaled.train[, -1])
auto.real <- Auto[-index, "mpg"]
auto.pred <- fit.pred$net.result*(max(Auto$mpg) - min(Auto$mpg)) + min(Auto$mpg)
#cor^2
round(cor(auto.pred, auto.real)^2, 6)
fit.pred <- compute(fit, auto.scaled.test[, -1])
auto.real <- Auto[-index, "mpg"]
auto.pred <- fit.pred$net.result * (max(Auto$mpg) - min(Auto$mpg)) + min(Auto$mpg)
#cor^2
round(cor(auto.pred, auto.real)^2, 6)
#MSE
mse(auto.real, unlist(auto.pred))
#SSE
sum((auto.real - auto.pred)^2)/2
#RMSE
rmse(auto.real, auto.pred)
olden(fit)
packages.cran = c("tidyverse", "ISLR", "neuralnet", "NeuralNetTools",
"caret", "ROCR", "GGally", "Metrics")
inst <- packages.cran %in% installed.packages()
if(length(packages.cran[!inst]) > 0) install.packages(packages.cran[!inst])
lapply(packages.cran, require, character.only=T)
Private <- College$Private
college.num <- College %>% select(-Private)
max.data <- apply(college.num, 2, max)
min.data <- apply(college.num, 2, min)
college.scaled <- data.frame(cbind(scale(college.num, center = min.data, scale = max.data - min.data), Private = Private))
college.scaled$Private <- factor(college.scaled$Private, labels = c("No", "Yes"))
datos <- pivot_longer(college.scaled, cols = 1:17)
ggplot(datos, aes(x = value, fill = Private)) +
geom_histogram(position = "identity" , alpha = 0.5, bins = 10)+
facet_wrap(~name)+
theme_minimal()
Private <- college.scaled$Private
Private <- as.data.frame(Private)
Private <- with(Private, data.frame(model.matrix(~Private + 0)))
college.prep <- as.data.frame(cbind(college.scaled, Private)) %>%
select(-Private)
head(college.prep)
set.seed(1234)
index = sample(1:nrow(college.prep),round(.7*nrow(college.prep)))
college.prep.train <- as.data.frame(college.prep[index,])
college.prep.test <- as.data.frame(college.prep[-index,])
n <- names(college.prep[1:17])
(f <- as.formula(paste("PrivateNo + PrivateYes ~", paste(n, collapse = " + "))))
set.seed(1234)
net <- neuralnet(f,
data=college.prep.train,
hidden=5)
names(net)
net.pred <- compute(net, college.prep.test[1:17])
head(data.frame(Private = college.scaled[-index, "Private"],
PrivateNo=round(net.pred$net.result[,1],2),
PrivateYes=round(net.pred$net.result[,2],2)))
olden(net)
olden(net) +
theme(axis.text.x = element_text(angle = 45))
olden(net) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1))
olden(net) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5))
olden(net) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.2))
olden(net) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 0.5))
olden(net) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1.5))
olden(net) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1.2))
olden(net) +
theme(axis.text.x = element_text(angle = 45, vhjust = 1.2))
olden(net) +
theme(axis.text.x = element_text(angle = 45, hjust = 1.2))
packages = c("googlesheets4")
inst <- packages %in% installed.packages()
if(length(packages[!inst]) > 0) install.packages(packages[!inst])
lapply(packages, require, character.only=T)
read_sheet("https://docs.google.com/spreadsheets/d/1mt2-btjg-pw9mcwagWJhZm9GPE5z7qbS0aYD1mR1JZI/edit#gid=1508920279")
sheet1 <- read_sheet("https://docs.google.com/spreadsheets/d/1mt2-btjg-pw9mcwagWJhZm9GPE5z7qbS0aYD1mR1JZI/edit#gid=1508920279")
View(sheet1)
# Script para generar visualizaciones con evolución de xG y xPoints
# Instalamos y cargamos los paquetes necesarios --------------------------------
packages.cran = c("tidyverse", "httr")
inst <- packages.cran %in% installed.packages()
if(length(packages.cran[!inst]) > 0) install.packages(packages.cran[!inst])
lapply(packages.cran, require, character.only=T)
# Recogemos los tiros de Fotmob-------------------------------------------------
recoger.tiros.fotmob <- function(from, to){
tiros <- data.frame()
for(matchId in from:to){
fotmob.match.url <- paste0("https://www.fotmob.com/matchDetails?matchId=",
matchId,
"&ccode3=ESP&refresh=true&includeBuzzTab=true")
response <- GET(fotmob.match.url)
content_parsed <- content(response, as = "parsed")
if(!is.null(content_parsed$content$shotmap$shots)){
tiros.aux <- as.data.frame(do.call(rbind,
content_parsed$content$shotmap$shots),
stringsAsFactors = F)
tiros <- rbind(tiros, tiros.aux)
}
}
return(tiros)
}
tiros.total <- recoger.tiros.fotmob(1, 150000) #3714087
recoger.tiros.fotmob <- function(from, to){
tiros <- data.frame()
for(matchId in from:to){
fotmob.match.url <- paste0("https://www.fotmob.com/matchDetails?matchId=",
matchId,
"&ccode3=ESP&refresh=true&includeBuzzTab=true")
response <- GET(fotmob.match.url)
content_parsed <- content(response, as = "parsed")
if(!is.null(content_parsed$content$shotmap$shots)){
tiros.aux <- as.data.frame(do.call(rbind,
content_parsed$content$shotmap$shots),
stringsAsFactors = F)
tiros <- rbind(tiros, tiros.aux)
}
}
return(tiros)
}
for(num in 1:3714087){
tiros.total <- recoger.tiros.fotmob(num, num + 1) #3714087
}
View(tiros.total)
for(num in 1:3714087){
tiros.total <- recoger.tiros.fotmob(num, num + 1) #3714087
}
View(tiros.total)
for(num in 1:20){
tiros.total <- recoger.tiros.fotmob(num, num + 1) #3714087
}
for(num in 20:40){
tiros.total <- recoger.tiros.fotmob(num, num + 1) #3714087
}
for(num in 40:60){
tiros.total <- recoger.tiros.fotmob(num, num + 1) #3714087
}
for(num in 60:80){
tiros.total <- recoger.tiros.fotmob(num, num + 1) #3714087
}
for(num in 80:100){
tiros.total <- recoger.tiros.fotmob(num, num + 1) #3714087
}
for(num in 1:3714087){
tiros.total <- rbind(tiros.total, recoger.tiros.fotmob(num, num + 1)) #3714087
}
num
for(num in 9553:3714087){
tiros.total <- rbind(tiros.total, recoger.tiros.fotmob(num, num + 1)) #3714087
}
num
for(num in 22059:3714087){
tiros.total <- rbind(tiros.total, recoger.tiros.fotmob(num, num + 1)) #3714087
}
View(tiros.total)
setwd("D:/Blog Data Kicks/ejemplos_blog")
packages.cran = c("tidyverse", "jsonlite", "gt", "paletteer")
inst <- packages.cran %in% installed.packages()
if(length(packages.cran[!inst]) > 0) install.packages(packages.cran[!inst])
lapply(packages.cran, require, character.only=T)
install.packages("ellipsis")
packages.cran = c("tidyverse", "jsonlite", "gt", "paletteer")
inst <- packages.cran %in% installed.packages()
if(length(packages.cran[!inst]) > 0) install.packages(packages.cran[!inst])
lapply(packages.cran, require, character.only=T)
